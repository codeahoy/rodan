{"version":3,"sources":["components/NameValueFields.js","index.js"],"names":["NameValueFields","props","addfields","event","fields","push","name","value","fieldsStateUpdatedCallback","btnRemoveFields","indexToRemove","target","id","newArray","i","length","inputNameChange","arr","slice","inputValueChange","initialValues","nextProps","nextState","this","console","log","JSON","stringify","className","key","headingText","map","val","type","onChange","onClick","buttonText","React","Component","Main","checkErrors","errors","state","headers","forEach","item","btnSubmitRestCall","setState","showResult","errorsArray","response","queryParams","url","fetch","method","Object","assign","then","res","json","data","undefined","reason","headersStateUpdated","headersCopy","queryParamsStateUpdated","paramsCopy","addDemoGetWithQueryParams","e","href","heading","message","ResultsSection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd78b948.chunk.js","sourcesContent":["import React from 'react';\n\nclass NameValueFields extends React.Component {\n    constructor(props) {\n        super(props);\n        this.fields = this.props.initialValues;\n    }\n\n  \n    addfields = event => {\n        this.fields.push({ name: '', value: '' });\n\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        this.fields = nextProps.initialValues;\n        console.log('call ' + JSON.stringify(nextProps.initialValues));\n        return true;\n    }\n\n\n    btnRemoveFields = event => {\n        let indexToRemove = event.target.id;\n\n        if (indexToRemove >= 0) {\n            let newArray = [];\n\n            for (let i = 0; i <  this.fields.length; i++) {\n                if (i != indexToRemove) {\n                    newArray.push( this.fields[i]);\n                }\n            }\n\n            this.fields = newArray;\n        }\n\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n   \n\n    inputNameChange = event => {\n        let arr =  this.fields.slice();\n        let index = event.target.id;\n\n        arr[index].name = event.target.value;\n\n        this.fields = arr;\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n    inputValueChange = event => {\n        let arr = this.fields.slice();\n        let index = event.target.id;\n\n        arr[index].value = event.target.value;\n\n        this.fields = arr;\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n    render() {\n\n        return (\n            <div className=\"mt-3\" key={this.props.initialValues}>\n                <h5>{this.props.headingText}</h5>\n                {\n                    this.fields.map((val, key) => {\n                        return (\n                            <div className=\"mt-1\" key={key}>\n                                <input\n                                    type=\"text\"\n                                    id={key}\n                                    onChange={this.inputNameChange}\n                                    value={this.fields[key].name}\n\n                                />\n\n                                <input\n                                    type=\"text\"\n                                    id={key}\n                                    onChange={this.inputValueChange}\n                                    value={this.fields[key].value}\n                                />\n                                <button id={key} onClick={this.btnRemoveFields}>x</button>\n                            </div>\n                        );\n                    })\n                }\n                <button className=\"mt-1\" onClick={this.addfields}>{this.props.buttonText}</button>\n            </div>\n        )\n    }\n}\n\nexport default NameValueFields;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NameValueFields from './components/NameValueFields';\n\nclass Main extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            url: 'https://jsonplaceholder.typicode.com/users',\n            method: 'GET',\n            headers: [],\n            errors: [],\n            queryParams: [],\n            showResult: false,\n        };\n    }\n\n    checkErrors = () => {\n\n        let errors = [];\n\n        this.state.headers.forEach((item) => {\n            if (item.name.length === 0) {\n                errors.push('Headers cannot be empty');\n            }\n        });\n\n        return errors;\n    }\n\n    btnSubmitRestCall = event => {\n\n        // This will show the results section\n        this.setState({ showResult: true });\n\n        // Clear previous errors and check for new ones\n        this.setState({ errors: [] });\n\n        let errorsArray = this.checkErrors();\n        if (errorsArray.length > 0) {\n            this.setState({ errors: errorsArray.slice() });\n            return;\n        }\n\n        this.setState({ response: 'fetching...' });\n\n        let queryParams = '';\n        if (this.state.queryParams.length > 0) {\n            queryParams = '?';\n            this.state.queryParams.map((item) => {\n                if (item.name.length > 0) {\n                    queryParams = queryParams + item.name + '=' + item.value + '&';\n                }\n\n                return item; // To get rid of warning\n            });\n            queryParams = queryParams.slice(0, -1); // Delete last ampersand (&)\n        }\n\n        let url = this.state.url + queryParams;\n\n        console.log(url);\n\n        fetch(url, {\n            method: this.state.method,\n            headers: Object.assign({}, ...this.state.headers.map(item => ({ [item.name]: item.value }))),\n\n        }\n        )\n            .then(res => {\n                console.log(res);\n                return res.json()\n            })\n            .then((data) => {\n                //console.log(data);\n                this.setState({ response: JSON.stringify(data, undefined, 2) });\n            }, reason => {\n                this.setState({ response: 'error ' + reason });\n            })\n    }\n\n    headersStateUpdated = (headersCopy) => {\n        this.setState({ headers: headersCopy })\n    }\n\n    queryParamsStateUpdated = (paramsCopy) => {\n        this.setState({ queryParams: paramsCopy })\n    }\n\n    addDemoGetWithQueryParams = () => {\n\n        this.setState({\n            headers: [],\n            queryParams: [{name: 'symbols', value: 'USD,GBP'}],\n            url: 'https://api.exchangeratesapi.io/latest',\n        });\n    }\n\n\n\n    render() {\n        return (\n\n            <div className=\"container-fluid mt-3\">\n                <div className=\"row content\">\n                    <div className=\"col-lg-1\"></div>\n                    <div className=\"col-lg-5\">\n\n                        <select\n                            value={this.state.method}\n                            onChange={(e) => this.setState({ method: e.target.value })}>\n\n                            <option value=\"POST\">POST</option>\n                            <option value=\"GET\">GET</option>\n                            <option value=\"PUT\">PUT</option>\n                        </select>\n                        <input\n                            type=\"text\"\n                            value={this.state.url}\n                            onChange={(e) => this.setState({ url: e.target.value })}\n                        />\n                        <button onClick={this.btnSubmitRestCall}>Call</button>\n                        <br />\n\n                        <NameValueFields\n                            headingText='HTTP Header'\n                            buttonText='Add Headers'\n                            fieldsStateUpdatedCallback={this.headersStateUpdated} \n                            initialValues={this.state.headers.slice()} />\n\n                        <NameValueFields\n                            headingText='Query Parameters'\n                            buttonText='Add Parameters'\n                            fieldsStateUpdatedCallback={this.queryParamsStateUpdated}\n                            initialValues={this.state.queryParams.slice()} />\n\n                            <h4 className=\"mt-4\"> Examples </h4>\n\n                        <a href=\"#\" onClick={this.addDemoGetWithQueryParams}>Exchange Rate (Query Parameter)</a>\n\n\n                    </div>\n                    <div className=\"col-lg-5\">\n                        {/*\n                        Check for errors and render the ResultsSection component with either error message\n                        or the actual response depending on whether there are errors or not.\n                        */}\n\n                        {(this.state.errors.length > 0) ?\n                            <ResultsSection\n                                heading={`Error`}\n                                message={this.state.errors}\n                            />\n                            :\n                            <ResultsSection\n                                heading={`${this.state.method} ${this.state.url}`}\n                                message={this.state.response}\n                            />\n                        }\n\n\n\n                    </div>\n                    <div className=\"col-lg-1\"></div>\n                </div>\n            </div>\n        );\n    }\n};\n\nclass ResultsSection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <>\n                <h5> {`Result: ${this.props.heading}`}  </h5>\n                <pre>{this.props.message}</pre>\n            </>\n        );\n    }\n}\nReactDOM.render(<Main />, document.getElementById('root'));"],"sourceRoot":""}