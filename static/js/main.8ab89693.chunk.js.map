{"version":3,"sources":["components/NameValueFields.js","components/AuthorizationFields.js","index.js"],"names":["NameValueFields","props","addfields","event","fields","push","name","value","fieldsStateUpdatedCallback","btnRemoveFields","indexToRemove","target","id","newArray","i","length","inputNameChange","arr","slice","inputValueChange","initialValues","nextProps","nextState","this","className","key","headingText","map","val","type","onChange","onClick","buttonText","React","Component","AuthorizationFields","handleAuthTypeChange","preventDefault","authType","auth","username","password","updateParentByCallback","authStateUpdatedCallback","Object","assign","handleBasicAuthInputChange","console","log","JSON","stringify","placeholder","Main","checkErrors","errors","state","headers","forEach","item","btnSubmitRestCall","setState","showResult","errorsArray","response","queryParams","url","encode","fetch","method","then","res","json","data","undefined","reason","headersStateUpdated","headersCopy","queryParamsStateUpdated","paramsCopy","addDemoGetWithQueryParams","authStateUpdated","authCopy","class","e","href","heading","message","ResultsSection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ab89693.chunk.js","sourcesContent":["import React from 'react';\n\nclass NameValueFields extends React.Component {\n    constructor(props) {\n        super(props);\n        this.fields = this.props.initialValues;\n    }\n\n  \n    addfields = event => {\n        this.fields.push({ name: '', value: '' });\n\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        this.fields = nextProps.initialValues;\n        //console.log('call ' + JSON.stringify(nextProps.initialValues));\n        return true;\n    }\n\n\n    btnRemoveFields = event => {\n        let indexToRemove = event.target.id;\n\n        if (indexToRemove >= 0) {\n            let newArray = [];\n\n            for (let i = 0; i <  this.fields.length; i++) {\n                if (i != indexToRemove) {\n                    newArray.push( this.fields[i]);\n                }\n            }\n\n            this.fields = newArray;\n        }\n\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n   \n\n    inputNameChange = event => {\n        let arr =  this.fields.slice();\n        let index = event.target.id;\n\n        arr[index].name = event.target.value;\n\n        this.fields = arr;\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n    inputValueChange = event => {\n        let arr = this.fields.slice();\n        let index = event.target.id;\n\n        arr[index].value = event.target.value;\n\n        this.fields = arr;\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n    render() {\n\n        return (\n            <div className=\"mt-3\" key={this.props.initialValues}>\n                <h5>{this.props.headingText}</h5>\n                {\n                    this.fields.map((val, key) => {\n                        return (\n                            <div className=\"mt-1\" key={key}>\n                                <input\n                                    className=\"mx-1\"\n                                    type=\"text\"\n                                    id={key}\n                                    onChange={this.inputNameChange}\n                                    value={this.fields[key].name}\n\n                                />\n\n                                <input\n                                    type=\"text\"\n                                    id={key}\n                                    onChange={this.inputValueChange}\n                                    value={this.fields[key].value}\n                                />\n                                <button id={key} onClick={this.btnRemoveFields}>x</button>\n                            </div>\n                        );\n                    })\n                }\n                <button className=\"mt-1\" onClick={this.addfields}>{this.props.buttonText}</button>\n            </div>\n        )\n    }\n}\n\nexport default NameValueFields;","import React from 'react';\n\nclass AuthorizationFields extends React.Component {\n    constructor(props) {\n        super(props);\n        this.auth = this.props.auth;\n\n    }\n\n    handleAuthTypeChange = event => {\n\n        event.preventDefault();\n\n        let authType = event.target.value\n        let auth = {};\n\n        if (authType === 'basic') {\n            auth = {\n                type: 'basic',\n                username: '',\n                password: ''\n            }\n\n        } else if (authType === 'bearer') {\n            auth = {\n                type: 'bearer',\n            }\n\n        } else {\n            auth = {\n                type: 'no',\n            }\n        }\n\n        this.auth = auth;\n        this.updateParentByCallback();\n    }\n\n    updateParentByCallback = () => {\n        this.props.authStateUpdatedCallback(Object.assign({}, this.auth));\n    }\n\n    handleBasicAuthInputChange = (event) => {\n\n        console.log(event.target.name);\n\n        if (event.target.name === 'username') {\n            this.auth.username = event.target.value;\n            console.log(this.auth)\n        } else if (event.target.name === 'password') {\n\n            this.auth.password = event.target.value;\n\n        }\n        this.updateParentByCallback();\n        //this.auth[event.name] = event.value;\n\n    }\n\n    // Overriding this method to receive adhoc updates from parent component. \n    // Usually, this happens when a user clicks on an Example call (or History) \n    // which might update the state in parent. In that case, we want to assign\n    // local variable to the new value passed in props to this method.\n    shouldComponentUpdate(nextProps, nextState) {\n        this.auth = nextProps.auth;\n        console.log(`shouldComponentUpdate : ${JSON.stringify(this.auth)} next: ${JSON.stringify(nextProps.auth)}`);\n        return true;\n    }\n\n\n    render() {\n        return (\n            <>\n            <h5>Authorization</h5>\n                <select\n                    value={this.auth.type}\n                    onChange={this.handleAuthTypeChange}>\n\n                    <option value=\"no\">No Authentication</option>\n                    <option value=\"basic\">Basic</option>\n                </select>\n                <br/>\n\n                {\n                    this.auth.type === 'basic' ?\n                    <div className=\"mt-1\">\n                        <input\n                            type=\"text\"\n                            className=\"mx-1\"\n                            name=\"username\"\n                            value={this.auth.username}\n                            placeholder=\"Username\"\n                            onChange={this.handleBasicAuthInputChange}\n\n                        /> \n                        <input\n                            type=\"text\"\n                            className=\"mt-1\"\n                            name=\"password\"\n                            value={this.auth.password}\n                            placeholder=\"Password\"\n                            onChange={this.handleBasicAuthInputChange}\n\n                        /> \n\n                    </div>\n                        \n                        :\n                        <div></div>}\n\n\n\n            </>\n        )\n\n\n    }\n}\n\n\nexport default AuthorizationFields;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NameValueFields from './components/NameValueFields';\nimport AuthorizationFields from './components/AuthorizationFields';\nimport { encode } from \"base-64\";\n\nclass Main extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            url: 'https://jsonplaceholder.typicode.com/users',\n            method: 'GET',\n            headers: [],\n            errors: [],\n            queryParams: [],\n            showResult: false,\n            auth: {}\n        };\n    }\n\n    checkErrors = () => {\n\n        let errors = [];\n\n        this.state.headers.forEach((item) => {\n            if (item.name.length === 0) {\n                errors.push('Headers cannot be empty');\n            }\n        });\n\n        return errors;\n    }\n\n    btnSubmitRestCall = event => {\n\n        event.preventDefault();\n\n        // This will show the results section\n        this.setState({ showResult: true });\n\n        // Clear previous errors and check for new ones\n        this.setState({ errors: [] });\n\n        let errorsArray = this.checkErrors();\n        if (errorsArray.length > 0) {\n            this.setState({ errors: errorsArray.slice() });\n            return;\n        }\n\n        this.setState({ response: 'fetching...' });\n\n        let queryParams = '';\n        if (this.state.queryParams.length > 0) {\n            queryParams = '?';\n            this.state.queryParams.map((item) => {\n                if (item.name.length > 0) {\n                    queryParams = queryParams + item.name + '=' + item.value + '&';\n                }\n\n                return item; // To get rid of warning\n            });\n            queryParams = queryParams.slice(0, -1); // Delete last ampersand (&)\n        }\n\n        let url = this.state.url + queryParams;\n        console.log(url);\n\n        // Assign headers array from the state\n        let headers = Object.assign({}, ...this.state.headers.map(item => ({ [item.name]: item.value })));\n\n        // Assign authorization array from the state\n        if (this.state.auth.type != null && this.state.auth.type === 'basic') {\n            console.log('adding auth')\n            headers = Object.assign(headers, {\n                'Authorization': 'Basic ' + encode (this.state.auth.username + \":\" + this.state.auth.password)\n            });\n        }\n\n        fetch(url, {\n            method: this.state.method,\n            headers: headers,\n\n        }\n        )\n            .then(res => {\n                console.log(res);\n                return res.json()\n            })\n            .then((data) => {\n                //console.log(data);\n                this.setState({ response: JSON.stringify(data, undefined, 2) });\n            }, reason => {\n                this.setState({ response: 'error ' + reason });\n            })\n    }\n\n    headersStateUpdated = (headersCopy) => {\n        this.setState({ headers: headersCopy })\n    }\n\n    queryParamsStateUpdated = (paramsCopy) => {\n        this.setState({ queryParams: paramsCopy })\n    }\n\n    addDemoGetWithQueryParams = () => {\n\n        this.setState({\n            headers: [],\n            queryParams: [{ name: 'symbols', value: 'USD,GBP' }],\n            url: 'https://api.exchangeratesapi.io/latest',\n        });\n    }\n\n    authStateUpdated = (authCopy) => {\n        console.log('authStateUpdated');\n        this.setState({\n            auth: authCopy\n        });\n\n    }\n\n    render() {\n        return (\n\n            <div className=\"container-fluid mt-3\">\n                <div className=\"row content\">\n                    <div className=\"col-lg-1\"></div>\n                    <div className=\"col-lg-5\">\n\n                        <form class=\"form-inline\">\n                            <div class=\"form-group mb-2\">\n                            <select\n                            className=\"custom-select\"\n                            value={this.state.method}\n                            onChange={(e) => this.setState({ method: e.target.value })}>\n\n                            <option value=\"POST\">POST</option>\n                            <option value=\"GET\">GET</option>\n                            <option value=\"PUT\">PUT</option>\n                        </select>\n                            </div>\n                            <div class=\"form-group mx-sm-3 mb-2\">\n                            <input\n                            type=\"text\"\n                            className=\"input-xxlarge\"\n                            value={this.state.url}\n                        \n                            onChange={(e) => this.setState({ url: e.target.value })}\n                        />\n                            </div>\n\n                            <div class=\"form-group mb-2\">\n                            <button className=\"btn btn-primary mb-2\" onClick={this.btnSubmitRestCall}>Call</button>\n                        </div>\n                        \n                        </form>\n\n                        <hr/>\n\n                        <AuthorizationFields \n                        auth={this.state.auth} \n                        authStateUpdatedCallback={this.authStateUpdated} />\n\n<hr/>\n\n                        <NameValueFields\n                            headingText='HTTP Header'\n                            buttonText='Add Headers'\n                            fieldsStateUpdatedCallback={this.headersStateUpdated}\n                            initialValues={this.state.headers.slice()} />\n\n<hr/>\n\n                        <NameValueFields\n                            headingText='Query Parameters'\n                            buttonText='Add Parameters'\n                            fieldsStateUpdatedCallback={this.queryParamsStateUpdated}\n                            initialValues={this.state.queryParams.slice()} />\n\n<hr/>\n\n                        <h4 className=\"mt-4\"> Examples </h4>\n\n                        <a href=\"#\" onClick={this.addDemoGetWithQueryParams}>Exchange Rate (Query Parameter)</a>\n\n\n                    </div>\n                    <div className=\"col-lg-5\">\n                        {/*\n                        Check for errors and render the ResultsSection component with either error message\n                        or the actual response depending on whether there are errors or not.\n                        */}\n\n                        {(this.state.errors.length > 0) ?\n                            <ResultsSection\n                                heading={`Error`}\n                                message={this.state.errors}\n                            />\n                            :\n                            <ResultsSection\n                                heading={`${this.state.method} ${this.state.url}`}\n                                message={this.state.response}\n                            />\n                        }\n\n\n\n                    </div>\n                    <div className=\"col-lg-1\"></div>\n                </div>\n            </div>\n        );\n    }\n};\n\nclass ResultsSection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <>\n                <h5> {`Result: ${this.props.heading}`}  </h5>\n                <pre>{this.props.message}</pre>\n            </>\n        );\n    }\n}\nReactDOM.render(<Main />, document.getElementById('root'));"],"sourceRoot":""}