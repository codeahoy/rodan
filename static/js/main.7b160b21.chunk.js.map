{"version":3,"sources":["components/NameValueFields.js","index.js"],"names":["NameValueFields","props","addfields","event","setState","prevState","fields","name","value","btnRemoveFields","indexToRemove","target","id","newArray","i","state","length","push","slice","inputNameChange","arr","inputValueChange","prevProps","this","fieldsStateUpdatedCallback","className","headingText","map","val","key","type","onChange","onClick","buttonText","React","Component","Main","checkErrors","errors","headers","forEach","item","btnSubmitRestCall","showResult","errorsArray","response","queryParams","url","console","log","fetch","method","Object","assign","then","res","json","data","JSON","stringify","undefined","reason","headersStateUpdated","headersCopy","queryParamsStateUpdated","paramsCopy","addDemoGetWithQueryParams","e","initialValues","heading","message","ResultsSection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b160b21.chunk.js","sourcesContent":["import React from 'react';\n\nclass NameValueFields extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: [],\n        }\n    }\n    addfields = event => {\n        this.setState((prevState) => ({\n            fields: [...prevState.fields, { name: '', value: '' }]\n        })\n        );\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.fields !== this.state.fields) {\n            this.props.fieldsStateUpdatedCallback(this.state.fields.slice());\n        }\n\n    }\n\n    btnRemoveFields = event => {\n        let indexToRemove = event.target.id;\n\n        if (indexToRemove >= 0) {\n            let newArray = [];\n\n            for (let i = 0; i < this.state.fields.length; i++) {\n                if (i != indexToRemove) {\n                    newArray.push(this.state.fields[i]);\n                }\n            }\n\n            this.setState({ fields: newArray.slice() })\n        }\n    }\n\n    inputNameChange = event => {\n        let arr = this.state.fields.slice();\n        let index = event.target.id;\n\n        arr[index].name = event.target.value;\n\n        this.setState({ fields: arr });\n    }\n\n    inputValueChange = event => {\n        let arr = this.state.fields.slice();\n        let index = event.target.id;\n\n        arr[index].value = event.target.value;\n\n        this.setState({ fields: arr });\n    }\n\n    render() {\n\n        return (\n            <div className=\"mt-3\">\n                <h5>{this.props.headingText}</h5>\n                {\n                    this.state.fields.map((val, key) => {\n                        return (\n                            <div className=\"mt-1\" key={key}>\n                                <input\n                                    type=\"text\"\n                                    id={key}\n                                    onChange={this.inputNameChange}\n                                    value={this.state.fields[key].name}\n\n                                />\n\n                                <input\n                                    type=\"text\"\n                                    id={key}\n                                    onChange={this.inputValueChange}\n                                    value={this.state.fields[key].value}\n                                />\n                                <button id={key} onClick={this.btnRemoveFields}>x</button>\n                            </div>\n                        );\n                    })\n                }\n                <button className=\"mt-1\" onClick={this.addfields}>{this.props.buttonText}</button>\n            </div>\n        )\n    }\n}\n\nexport default NameValueFields;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NameValueFields from './components/NameValueFields';\n\nclass Main extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            url: 'https://jsonplaceholder.typicode.com/users',\n            method: 'GET',\n            headers: [],\n            errors: [],\n            queryParams: [],\n            showResult: false,\n        };\n    }\n\n    checkErrors = () => {\n\n        let errors = [];\n\n        this.state.headers.forEach((item) => {\n            if (item.name.length === 0) {\n                errors.push('Headers cannot be empty');\n            }\n        });\n\n        return errors;\n    }\n\n    btnSubmitRestCall = event => {\n\n        // This will show the results section\n        this.setState({ showResult: true });\n\n        // Clear previous errors and check for new ones\n        this.setState({ errors: [] });\n\n        let errorsArray = this.checkErrors();\n        if (errorsArray.length > 0) {\n            this.setState({ errors: errorsArray.slice() });\n            return;\n        }\n\n        this.setState({ response: 'fetching...' });\n\n        let queryParams = '';\n        if (this.state.queryParams.length > 0) {\n            queryParams = '?';\n            this.state.queryParams.map((item) => {\n                if (item.name.length > 0) {\n                    queryParams = queryParams + item.name + '=' + item.value + '&';\n                }\n\n                return item; // To get rid of warning\n            });\n            queryParams = queryParams.slice(0, -1); // Delete last ampersand (&)\n        }\n\n        let url = this.state.url + queryParams;\n\n        console.log(url);\n\n        fetch(url, {\n            method: this.state.method,\n            headers: Object.assign({}, ...this.state.headers.map(item => ({ [item.name]: item.value }))),\n\n        }\n        )\n            .then(res => {\n                console.log(res);\n                return res.json()\n            })\n            .then((data) => {\n                //console.log(data);\n                this.setState({ response: JSON.stringify(data, undefined, 2) });\n            }, reason => {\n                this.setState({ response: 'error ' + reason });\n            })\n    }\n\n    headersStateUpdated = (headersCopy) => {\n        this.setState({ headers: headersCopy })\n    }\n\n    queryParamsStateUpdated = (paramsCopy) => {\n        this.setState({ queryParams: paramsCopy })\n    }\n\n    addDemoGetWithQueryParams = () => {\n\n        this.setState({\n            queryParams: [{name: 'symbols', value: 'USD,GBP'}],\n            url: 'https://api.exchangeratesapi.io/latest',\n        });\n    }\n    \n\n\n    render() {\n        return (\n\n            <div className=\"container-fluid mt-3\">\n                <div className=\"row content\">\n                    <div className=\"col-lg-1\"></div>\n                    <div className=\"col-lg-5\">\n\n                        <select\n                            value={this.state.method}\n                            onChange={(e) => this.setState({ method: e.target.value })}>\n\n                            <option value=\"POST\">POST</option>\n                            <option value=\"GET\">GET</option>\n                            <option value=\"PUT\">PUT</option>\n                        </select>\n                        <input\n                            type=\"text\"\n                            value={this.state.url}\n                            onChange={(e) => this.setState({ url: e.target.value })}\n                        />\n                        <button onClick={this.btnSubmitRestCall}>Call</button>\n                        <br />\n\n                        <NameValueFields\n                            headingText='HTTP Header'\n                            buttonText='Add Headers'\n                            fieldsStateUpdatedCallback={this.headersStateUpdated} />\n\n                        <NameValueFields\n                            headingText='Query Parameters'\n                            buttonText='Add Parameters'\n                            fieldsStateUpdatedCallback={this.queryParamsStateUpdated}\n                            initialValues={this.state.queryParams.slice()} />\n\n                        <button className='mt-4' onClick={this.addDemoGetWithQueryParams}>GET w/ query params</button>\n\n\n                    </div>\n                    <div className=\"col-lg-5\">\n                        {/*\n                        Check for errors and render the ResultsSection component with either error message\n                        or the actual response depending on whether there are errors or not.\n                        */}\n\n                        {(this.state.errors.length > 0) ?\n                            <ResultsSection\n                                heading={`Error`}\n                                message={this.state.errors}\n                            />\n                            :\n                            <ResultsSection\n                                heading={`${this.state.method} ${this.state.url}`}\n                                message={this.state.response}\n                            />\n                        }\n\n\n\n                    </div>\n                    <div className=\"col-lg-1\"></div>\n                </div>\n            </div>\n        );\n    }\n};\n\nclass ResultsSection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <>\n                <h5> {`Result: ${this.props.heading}`}  </h5>\n                <pre>{this.props.message}</pre>\n            </>\n        );\n    }\n}\nReactDOM.render(<Main />, document.getElementById('root'));"],"sourceRoot":""}