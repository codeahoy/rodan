{"version":3,"sources":["components/NameValueFields.js","components/AuthorizationFields.js","utils.js","components/RequestBody.js","config.js","components/ExampleRestCalls.js","http/RodanResponse.js","components/ResponseResult.js","index.js"],"names":["NameValueFields","props","addfields","event","fields","push","name","value","fieldsStateUpdatedCallback","btnRemoveFields","indexToRemove","target","id","newArray","i","length","inputNameChange","arr","slice","inputValueChange","initialValues","nextProps","nextState","this","className","key","headingText","map","val","type","onChange","onClick","buttonText","React","Component","AuthorizationFields","handleAuthTypeChange","preventDefault","authType","auth","username","password","updateParentByCallback","authStateUpdatedCallback","Object","assign","handleBasicAuthInputChange","console","log","placeholder","defaultBodyObject","contentType","content","defaultRawBodyObject","RequestBody","handleBodyTypeChange","bodyType","body","rawBodyContentsTextArea","updateParentOnChange","handleRawBodyTypeChange","JSON","stringify","handleRawBodyContentChange","onComponentParamsUpdate","checked","htmlFor","rows","rodanExtensionId","ExampleRestCalls","stateUpdatedCallback","headers","queryParams","url","method","MIMEType","require","RodanResponse","code","getBodyAsJson","parse","_bodyAsString","_statusCode","_headers","_body","contentTypeHeader","_mimeType","subtype","_url","_method","requestStatus","_requestStatus","extensionResponse","response","header","responseText","statusCode","responseHeaders","toLowerCase","mimeType","ResponseResult","toggleResponseHeaders","setState","showHeaders","state","getPrettyTextBasedOnMimeType","text","mime","prettyData","json","xml","constructor","prettyResponse","mimeSubType","entries","hasErrors","errorMessage","Main","checkErrors","errors","forEach","item","btnSubmitRestCall","showResult","errorsArray","encode","fetchOptions","window","chrome","runtime","sendMessage","options","res","buildObject","err","headersStateUpdated","headersCopy","queryParamsStateUpdated","paramsCopy","authStateUpdated","authCopy","stateUpdated","stateCopy","bodyComponentUpdated","bodyCopy","msg","e","hasError","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.238a3f03.chunk.js","sourcesContent":["import React from 'react';\n\nclass NameValueFields extends React.Component {\n    constructor(props) {\n        super(props);\n        this.fields = this.props.initialValues;\n    }\n\n  \n    addfields = event => {\n        this.fields.push({ name: '', value: '' });\n\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        this.fields = nextProps.initialValues;\n        //console.log('call ' + JSON.stringify(nextProps.initialValues));\n        return true;\n    }\n\n\n    btnRemoveFields = event => {\n        let indexToRemove = event.target.id;\n\n        if (indexToRemove >= 0) {\n            let newArray = [];\n\n            for (let i = 0; i <  this.fields.length; i++) {\n                if (i != indexToRemove) {\n                    newArray.push( this.fields[i]);\n                }\n            }\n\n            this.fields = newArray;\n        }\n\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n   \n\n    inputNameChange = event => {\n        let arr =  this.fields.slice();\n        let index = event.target.id;\n\n        arr[index].name = event.target.value;\n\n        this.fields = arr;\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n    inputValueChange = event => {\n        let arr = this.fields.slice();\n        let index = event.target.id;\n\n        arr[index].value = event.target.value;\n\n        this.fields = arr;\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n    render() {\n\n        return (\n            <div className=\"mt-3\" key={this.props.initialValues}>\n                <h5>{this.props.headingText}</h5>\n                {\n                    this.fields.map((val, key) => {\n                        return (\n                            <div className=\"mt-1\" key={key}>\n                                <input\n                                    className=\"mx-1\"\n                                    type=\"text\"\n                                    id={key}\n                                    onChange={this.inputNameChange}\n                                    value={this.fields[key].name}\n\n                                />\n\n                                <input\n                                    type=\"text\"\n                                    id={key}\n                                    onChange={this.inputValueChange}\n                                    value={this.fields[key].value}\n                                />\n                                <button id={key} onClick={this.btnRemoveFields}>x</button>\n                            </div>\n                        );\n                    })\n                }\n                <button className=\"mt-1\" onClick={this.addfields}>{this.props.buttonText}</button>\n            </div>\n        )\n    }\n}\n\nexport default NameValueFields;","import React from 'react';\n\nclass AuthorizationFields extends React.Component {\n    constructor(props) {\n        super(props);\n        this.auth = this.props.auth;\n\n    }\n\n    handleAuthTypeChange = event => {\n\n        event.preventDefault();\n\n        let authType = event.target.value\n        let auth = {};\n\n        if (authType === 'basic') {\n            auth = {\n                type: 'basic',\n                username: '',\n                password: ''\n            }\n\n        } else if (authType === 'bearer') {\n            auth = {\n                type: 'bearer',\n            }\n\n        } else {\n            auth = {\n                type: 'no',\n            }\n        }\n\n        this.auth = auth;\n        this.updateParentByCallback();\n    }\n\n    updateParentByCallback = () => {\n        this.props.authStateUpdatedCallback(Object.assign({}, this.auth));\n    }\n\n    handleBasicAuthInputChange = (event) => {\n\n        console.log(event.target.name);\n\n        if (event.target.name === 'username') {\n            this.auth.username = event.target.value;\n            console.log(this.auth)\n        } else if (event.target.name === 'password') {\n\n            this.auth.password = event.target.value;\n\n        }\n        this.updateParentByCallback();\n        //this.auth[event.name] = event.value;\n\n    }\n\n    // Overriding this method to receive adhoc updates from parent component. \n    // Usually, this happens when a user clicks on an Example call (or History) \n    // which might update the state in parent. In that case, we want to assign\n    // local variable to the new value passed in props to this method.\n    shouldComponentUpdate(nextProps, nextState) {\n        this.auth = nextProps.auth;\n        //console.log(`shouldComponentUpdate : ${JSON.stringify(this.auth)} next: ${JSON.stringify(nextProps.auth)}`);\n        return true;\n    }\n\n\n    render() {\n        return (\n            <>\n            <h5>Authorization</h5>\n                <select\n                    value={this.auth.type}\n                    onChange={this.handleAuthTypeChange}>\n\n                    <option value=\"no\">No Authentication</option>\n                    <option value=\"basic\">Basic</option>\n                </select>\n                <br/>\n\n                {\n                    this.auth.type === 'basic' ?\n                    <div className=\"mt-1\">\n                        <input\n                            type=\"text\"\n                            className=\"mx-1\"\n                            name=\"username\"\n                            value={this.auth.username}\n                            placeholder=\"Username\"\n                            onChange={this.handleBasicAuthInputChange}\n\n                        /> \n                        <input\n                            type=\"text\"\n                            className=\"mt-1\"\n                            name=\"password\"\n                            value={this.auth.password}\n                            placeholder=\"Password\"\n                            onChange={this.handleBasicAuthInputChange}\n\n                        /> \n\n                    </div>\n                        \n                        :\n                        <div></div>}\n\n\n\n            </>\n        )\n\n\n    }\n}\n\n\nexport default AuthorizationFields;","\nexport const defaultBodyObject = {\n    type: 'no',\n    contentType: '',\n    content: ''\n}\n\nexport const defaultRawBodyObject = {\n    type: 'raw',\n    contentType: 'raw-text',\n    content: ''\n}\n\n\n","import React from 'react';\nimport { logObject, defaultRawBodyObject } from '../utils';\n\nclass RequestBody extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.body = this.props.body;\n        this.updateParentOnChange = this.props.onComponentParamsUpdate;\n        // Store the contents of the text area so it is not lost when users \n        // are switching between body types\n        this.rawBodyContentsTextArea = '';\n    }\n\n    handleBodyTypeChange = (event) => {\n\n        let bodyType = event.target.value;\n\n        if (bodyType === 'no') {\n            this.body = {\n                type: 'no'\n            };\n        } else if (bodyType === 'raw') {\n            this.body = defaultRawBodyObject;\n        }\n\n        // Restore the contents area of the text box\n        this.body.content = this.rawBodyContentsTextArea;\n        console.log('rawBodyContentsTextArea ' + this.rawBodyContentsTextArea);\n\n        this.updateParentOnChange(this.body);\n\n    }\n\n    handleRawBodyTypeChange = (event) => {\n        this.body.contentType = event.target.id;   \n        this.updateParentOnChange(this.body);\n        console.log('f ' + JSON.stringify(this.body));\n    }\n\n    handleRawBodyContentChange = (event) => {\n        this.rawBodyContentsTextArea = event.target.value;\n        this.body.content = this.rawBodyContentsTextArea;\n        this.updateParentOnChange(this.body);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        this.body = nextProps.body;\n        return true;\n    }\n\n\n\n    render() {\n        return (<>\n         <h5>Request Body</h5>\n         <select\n            value={this.body.type}\n            onChange={this.handleBodyTypeChange}>\n\n            <option value=\"no\">None</option>\n            <option value=\"raw\">Raw</option>\n            <option value=\"file\">File</option>\n        </select>\n\n        {\n            this.body.type === 'raw' ? \n            <div>\n                <div className=\"custom-control custom-radio custom-control-inline\">\n                <input type=\"radio\" checked={this.body.contentType === 'raw-text'} className=\"custom-control-input\" id=\"raw-text\" name=\"raw-type\" onChange={this.handleRawBodyTypeChange}/>\n                <label className=\"custom-control-label\" htmlFor=\"raw-text\">Text</label>\n                </div>\n\n                <div className=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" checked={this.body.contentType  === 'raw-json'} className=\"custom-control-input\" id=\"raw-json\" name=\"raw-type\" onChange={this.handleRawBodyTypeChange}/>\n                    <label className=\"custom-control-label\" htmlFor=\"raw-json\">JSON</label>\n                </div>\n\n                <div className=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" checked={this.body.contentType  === 'raw-xml'} className=\"custom-control-input\" id=\"raw-xml\" name=\"raw-type\" onChange={this.handleRawBodyTypeChange}/>\n                    <label className=\"custom-control-label\" htmlFor=\"raw-xml\">XML</label>\n                </div>\n            \n        \n                <div className=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" checked={this.body.contentType  === 'raw-javascript'} className=\"custom-control-input\" id=\"raw-javascript\" name=\"raw-type\" onChange={this.handleRawBodyTypeChange}/>\n                    <label className=\"custom-control-label\" htmlFor=\"raw-javascript\">JavaScript</label>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"rawBodyContent\">Large textarea</label>\n                    <textarea className=\"form-control rounded-0\" id=\"rawBodyContent\" value={this.body.content}rows=\"8\" onChange={this.handleRawBodyContentChange}></textarea>\n                </div>\n\n            </div>\n            :\n\n            <div></div>\n        } \n\n        </>);\n    }\n\n   \n}\n\n\nexport default RequestBody;","export const rodanExtensionId = \"mlphjckcfhahdpkgilejininpelpnacn\";\n","import React from 'react';\n\nclass ExampleRestCalls extends React.Component {\n\n\n\n    render() {\n        return (\n            <>\n            <h5>Examples</h5>\n            <button onClick={() => {\n                var newState = {\n                    headers: [],\n                    queryParams: [{ name: 'symbols', value: 'USD,GBP' }],\n                    url: 'https://api.exchangeratesapi.io/latest',\n                    method: 'GET'\n                };\n        \n                this.props.stateUpdatedCallback(Object.assign({}, newState));  \n\n            }}>Exchange Rate (Query Params)</button> \n\n            <br/>\n           \n            <button onClick={() => {\n                var newState = {\n                    headers: [],\n                    queryParams: [{ name: 'hand', value: 'wave' }],\n                    url: 'https://postman-echo.com/post',\n                    method: 'POST'\n                };\n        \n                this.props.stateUpdatedCallback(Object.assign({}, newState));  \n\n            }}>Postman POST Echo (Query Params)</button>\n           \n            </>\n            );\n        }\n}\n\nexport default ExampleRestCalls;\n\n\n","\nconst MIMEType = require(\"whatwg-mimetype\");\n\nclass RodanResponse {\n    constructor(code, headers, body) {\n        this._statusCode = code;\n        this._headers = headers;\n        this._body = body;\n    }\n\n    /* \n    This method takes content-type header as argument and initializes the MIMEType object which is\n    later used for determining sub type.\n    */\n    set mimeType(contentTypeHeader) {\n        this._mimeType = new MIMEType(contentTypeHeader);\n    }\n\n    get mimeType() {\n        return this._mimeType;\n    }\n\n    /*\n    Mime subtype can be: json, html, xml etc. \n    */\n    get mimeSubType() {\n        if (this._mimeType) {\n            return this._mimeType.subtype;\n        } else {\n            return '';\n        }\n    }\n\n    set statusCode(code) {\n        this._statusCode = code;\n    }\n\n\n    get statusCode() {\n        return this._statusCode;\n    }\n\n    set headers(headers) {\n        this._headers = headers;\n    }\n\n    get headers() {\n        return this._headers;\n    }\n\n    get url() {\n        return this._url;\n    }\n\n    set url(url) {\n        this._url = url;\n    }\n\n    get method() {\n        return this._method;\n    }\n\n    set method(method) {\n        this._method = method;\n    }\n\n    set body(body) {\n        this._body = body;\n    }\n\n    get body() {\n        return this._body;\n    }\n\n    set requestStatus(requestStatus) {\n        this._requestStatus = requestStatus;\n    }\n\n    get requestStatus() {\n        return this._requestStatus;\n    }\n\n    getBodyAsJson = () => JSON.parse(this._bodyAsString);\n\n    static buildObject(extensionResponse) {\n\n        //console.log(`buildObject ${JSON.stringify(extensionResponse)}`);\n        const response = new RodanResponse();\n\n        response.body = extensionResponse.responseText;\n        response.statusCode = extensionResponse.code;\n        response.headers = extensionResponse.responseHeaders;\n        response.url = extensionResponse.url;\n        response.method = extensionResponse.method;\n\n        // Iterate over the headers array to find the content-type header\n        for (const header in response.headers) {\n            if (header.toLowerCase() === 'content-type') {\n                response.mimeType = response.headers[header];\n            }\n        }\n        return response;\n    }\n    \n}\n\nexport default RodanResponse;","import React from 'react';\nimport { pd as prettyData } from 'pretty-data';\n\nexport default class ResponseResult extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showHeaders: false\n        }\n    }\n\n    toggleResponseHeaders = () => {\n        this.setState({\n            showHeaders: !this.state.showHeaders\n        });\n    }\n\n    getPrettyTextBasedOnMimeType = (text, mime) => {\n        if (mime === 'json') {\n            return prettyData.json(text)\n        } else if (mime === 'xml' || mime === 'html') {\n            return prettyData.xml(text);\n        } else {\n           return text;\n        }\n    }\n\n    render() {\n        if (this.props.response) {\n            console.log(`${this.constructor.name}: response ${JSON.stringify(this.props.response)}`)\n            \n            let prettyResponse = this.getPrettyTextBasedOnMimeType(this.props.response.body, this.props.response.mimeSubType);\n            \n            return (\n                <>\n                    <h5> {`${this.props.response.method} ${this.props.response.url}`} </h5>\n                    <p>HTTP Status: {this.props.response.statusCode}</p>\n                    <button onClick={(this.toggleResponseHeaders)}>Show/Hide Headers</button>\n                    {this.state.showHeaders ?\n                        <div>\n                            <h5>Response Headers</h5>\n                            <ul>\n                                {Object.entries(this.props.response.headers).map(([key, value]) => {\n                                    return (<li key={key}>{key}: {value} </li>)\n                                })\n                                }\n                            </ul>\n                        </div>\n                        :\n                        <></>\n                    }\n\n                    <h5>Body</h5>\n                    <pre>\n                        {prettyResponse}\n                    </pre>\n                </>\n            );\n        } else if (this.props.hasErrors) {\n            return (\n                <>\n                    <h5> {`${this.props.response.method} ${this.props.response.url}`} </h5>\n                    <p> Error - {this.props.errorMessage}</p>\n                </>\n            );\n\n        }\n\n        else {\n            return (\n                <>\n                </>\n            )\n        }\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NameValueFields from './components/NameValueFields';\nimport AuthorizationFields from './components/AuthorizationFields';\nimport { encode } from \"base-64\";\nimport RequestBody from './components/RequestBody';\nimport { defaultBodyObject } from './utils';\nimport { rodanExtensionId } from './config'\nimport ExampleRestCalls from './components/ExampleRestCalls';\nimport RodanResponse from './http/RodanResponse';\n\nimport ResponseResult from './components/ResponseResult';\n\nclass Main extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            url: 'https://jsonplaceholder.typicode.com/users',\n            method: 'GET',\n            headers: [],\n            errors: [], // These indicates client errors, e.g. wrong format, missing header value etc.\n            queryParams: [],\n            showResult: false,\n            auth: {},\n            body: defaultBodyObject\n        };\n    }\n\n    checkErrors = () => {\n\n        let errors = [];\n\n        this.state.headers.forEach((item) => {\n            if (item.name.length === 0) {\n                errors.push('Headers cannot be empty');\n            }\n        });\n\n        return errors;\n    }\n\n    btnSubmitRestCall = event => {\n\n        event.preventDefault();\n\n        // This will show the results section\n        this.setState({ showResult: true });\n\n        // Clear previous errors and check for new ones\n        this.setState({ errors: [] });\n\n        let errorsArray = this.checkErrors();\n        if (errorsArray.length > 0) {\n            this.setState({ errors: errorsArray.slice() });\n            return;\n        }\n\n        this.setState({ response: 'fetching...' });\n\n        let queryParams = '';\n        if (this.state.queryParams.length > 0) {\n            queryParams = '?';\n            this.state.queryParams.map((item) => {\n                if (item.name.length > 0) {\n                    queryParams = queryParams + item.name + '=' + item.value + '&';\n                }\n\n                return item; // To get rid of warning\n            });\n            queryParams = queryParams.slice(0, -1); // Delete last ampersand (&)\n        }\n\n        let url = this.state.url + queryParams;\n        console.log(url);\n\n        // Assign headers array from the state\n        let headers = Object.assign({}, ...this.state.headers.map(item => ({ [item.name]: item.value })));\n\n        // Assign authorization array from the state\n        if (this.state.auth.type != null && this.state.auth.type === 'basic') {\n            console.log('adding auth')\n            headers = Object.assign(headers, {\n                'Authorization': 'Basic ' + encode(this.state.auth.username + \":\" + this.state.auth.password)\n            });\n        }\n\n        // Add request body if it's selected\n        let body = this.state.body.content;\n        if (this.state.body.type !== 'no') {\n            if (this.state.body.type === 'raw') {\n                let contentType = {};\n                switch (this.state.body.contentType) {\n                    case 'raw-json':\n                        contentType = { 'Content-Type': 'application/json' };\n                        break;\n                    case 'raw-xml':\n                        contentType = { 'Content-Type': 'application/xml' };\n                        break;\n                    case 'raw-javacript':\n                        contentType = { 'Content-Type': 'application/javascript' };\n                        break;\n\n                    default:\n                        contentType = { 'Content-Type': 'application/text' };\n                }\n\n                headers = Object.assign(headers, contentType);\n            }\n        }\n\n        let fetchOptions = {\n            method: this.state.method,\n            headers: headers\n        }\n\n        if (this.state.method !== 'GET' && body.type !== 'no') {\n            fetchOptions =\n                Object.assign(fetchOptions, { body: body })\n        }\n\n\n        try {\n            window.chrome.runtime.sendMessage(\n                rodanExtensionId,\n                { url: url, options: fetchOptions },\n                res => {\n                    console.log({ res })\n                    \n                        const response = RodanResponse.buildObject(res);\n                        this.setState({ response: response });\n\n                        console.log({ response })\n                }\n            );\n        } catch (err) { // extension not found\n            console.log(err)\n        }\n    }\n\n    headersStateUpdated = (headersCopy) => {\n        this.setState({ headers: headersCopy })\n    }\n\n    queryParamsStateUpdated = (paramsCopy) => {\n        this.setState({ queryParams: paramsCopy })\n    }\n\n\n\n    authStateUpdated = (authCopy) => {\n        console.log('authStateUpdated');\n        this.setState({\n            auth: authCopy\n        });\n\n    }\n\n    stateUpdated = (stateCopy) => {\n        this.setState({ ...this.state, ...stateCopy });\n    }\n\n    bodyComponentUpdated = (bodyCopy) => {\n        console.log('body updated');\n        this.setState({\n            body: bodyCopy\n        })\n    }\n\n    render() {\n        return (\n\n            <div className=\"container-fluid mt-3\">\n                <div className=\"row content\">\n                    <div className=\"col-lg-1\"></div>\n                    <div className=\"col-lg-5\">\n\n                        <div className=\"input-group\">\n                            <select\n                                className=\"custom-select flex-shrink w-auto\"\n                                value={this.state.method}\n                                onChange={(e) => this.setState({ method: e.target.value })}>\n\n                                <option value=\"POST\">POST</option>\n                                <option value=\"GET\">GET</option>\n                                <option value=\"PUT\">PUT</option>\n                            </select>\n\n                            <input type=\"text\" value={this.state.url} placeholder=\"HTTP URL\" className=\"form-control\" onChange={(e) => this.setState({ url: e.target.value })} />\n                            <span className=\"input-group-btn ml-1\"><input type=\"button\" value=\"Call\" className=\"btn btn-primary\" onClick={this.btnSubmitRestCall} /></span>\n                        </div>\n\n\n\n                        <hr />\n\n                        <AuthorizationFields\n                            auth={this.state.auth}\n                            authStateUpdatedCallback={this.authStateUpdated} />\n\n                        <hr />\n\n                        <NameValueFields\n                            headingText='HTTP Header'\n                            buttonText='Add Headers'\n                            fieldsStateUpdatedCallback={this.headersStateUpdated}\n                            initialValues={this.state.headers.slice()} />\n\n                        <hr />\n\n                        <NameValueFields\n                            headingText='Query Parameters'\n                            buttonText='Add Parameters'\n                            fieldsStateUpdatedCallback={this.queryParamsStateUpdated}\n                            initialValues={this.state.queryParams.slice()} />\n\n                        <hr />\n\n                        <RequestBody\n                            body={this.state.body}\n                            onComponentParamsUpdate={this.bodyComponentUpdated} />\n\n                        <hr />\n\n                        <ExampleRestCalls\n                            stateUpdatedCallback={this.stateUpdated} />\n\n                    </div>\n                    <div className=\"col-lg-5\">\n\n                        <ResponseResult\n                            hasError={this.state.errors.length > 0 ? true : false}\n                            errorMessage={this.state.errors}\n\n                            //header = { this.log(`here ${JSON.stringify(this.state.response)}`)}\n                            response={this.state.response}\n                        />\n\n\n\n\n                    </div>\n                    <div className=\"col-lg-1\"></div>\n                </div>\n            </div>\n        );\n    }\n\n    log = (msg) => console.log(msg);\n};\n\n\nReactDOM.render(<Main />, document.getElementById('root'));"],"sourceRoot":""}