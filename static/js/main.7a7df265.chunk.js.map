{"version":3,"sources":["components/NameValueFields.js","index.js"],"names":["NameValueFields","props","addfields","event","setState","prevState","fields","name","value","btnRemoveFields","indexToRemove","target","id","newArray","i","state","length","push","slice","inputNameChange","arr","inputValueChange","prevProps","this","fieldsStateUpdatedCallback","headingText","map","val","key","className","type","onChange","onClick","buttonText","React","Component","Main","checkErrors","errors","headers","forEach","item","btnSubmitRestCall","showResult","errorsArray","response","fetch","url","method","Object","assign","then","res","console","log","json","data","JSON","stringify","undefined","reason","headersStateUpdated","headersCopy","e","heading","message","ResultsSection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a7df265.chunk.js","sourcesContent":["import React from 'react';\n\nclass NameValueFields extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            fields: [],\n        }\n        \n    }\n    addfields = event => {\n        this.setState((prevState) => ({\n            fields: [...prevState.fields, { name: '', value: '' }]\n        })\n        );\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if (prevState.fields !== this.state.fields) {\n            this.props.fieldsStateUpdatedCallback(this.state.fields.slice());\n        }\n        \n    }\n\n    btnRemoveFields = event => {\n\n        let indexToRemove = event.target.id;\n\n        if (indexToRemove >= 0) {\n            let newArray = [];\n\n            for (let i = 0; i < this.state.fields.length; i++) {\n                if (i != indexToRemove) {\n                    newArray.push(this.state.fields[i]);\n                }\n            }\n\n            this.setState({fields: newArray.slice()})\n        }\n    }\n\n    inputNameChange = event => {\n        let arr = this.state.fields.slice();\n        let index = event.target.id;\n\n        arr[index].name = event.target.value;\n\n        this.setState({ fields: arr });\n    }\n\n    inputValueChange = event => {\n        let arr = this.state.fields.slice();\n        let index = event.target.id;\n\n        arr[index].value = event.target.value;\n\n        this.setState({ fields: arr });\n    }\n\n    render() {\n\n        return (\n            <div>\n                <h5>{this.props.headingText}</h5>\n                {\n                    this.state.fields.map((val, key) => {\n                        return (\n                            <div className=\"mt-1\" key={key}>\n                                <input\n                                    type=\"text\"\n                                    id={key}\n                                    onChange={this.inputNameChange}\n                                    value={this.state.fields[key].name}\n\n                                />\n\n                                <input\n                                    type=\"text\"\n                                    id={key}\n                                    onChange={this.inputValueChange}\n                                    value={this.state.fields[key].value}\n                                />\n                                <button id={key} onClick={this.btnRemoveFields}>x</button>\n                            </div>\n                        );\n                    })\n                }\n                <button className=\"mt-1\" onClick={this.addfields}>{this.props.buttonText}</button>\n            </div>\n        )\n    }\n}\n\nexport default NameValueFields;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NameValueFields from './components/NameValueFields';\n\nclass Main extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            url: 'http://jsonplaceholder.typicode.com/users',\n            method: 'GET',\n            headers: [],\n            errors: [],\n            showResult: false,\n        };\n    }\n\n    checkErrors = () => {\n\n        let errors = [];\n\n        this.state.headers.forEach((item) => {\n            if (item.name.length === 0) {\n                errors.push('Headers cannot be empty');\n            }\n        });\n\n        return errors; \n    }\n\n    btnSubmitRestCall = event => {\n\n        // This will show the results section\n        this.setState({ showResult: true });\n\n        // Clear previous errors and check for new ones\n        this.setState({ errors: [] });\n\n        let errorsArray = this.checkErrors();\n        if (errorsArray.length > 0) {\n            this.setState({ errors: errorsArray.slice() });\n            return;\n        }\n\n        this.setState({ response: 'fetching...' });\n\n        fetch(this.state.url, {\n            method: this.state.method,\n            headers: Object.assign({}, ...this.state.headers.map(item => ({ [item.name]: item.value }))),\n\n        }\n        )\n            .then(res => {\n                console.log(res);\n                return res.json()\n            })\n            .then((data) => {\n                //console.log(data);\n                this.setState({ response: JSON.stringify(data, undefined, 2) });\n            }, reason => {\n                this.setState({ response: 'error ' + reason });\n            })\n    }\n\n    headersStateUpdated = (headersCopy) => {\n        this.setState({ headers: headersCopy })\n    }\n\n    render() {\n        return (\n\n            <div className=\"container-fluid mt-3\">\n                <div className=\"row content\">\n                    <div className=\"col-lg-1\"></div>\n                    <div className=\"col-lg-5\">\n\n                        <select value={this.state.method} onChange={(e) => this.setState({ method: e.target.value })}>\n                            <option value=\"POST\">POST</option>\n                            <option value=\"GET\">GET</option>\n                            <option value=\"PUT\">PUT</option>\n                        </select>\n                        <input\n                            type=\"text\"\n                            value={this.state.url}\n                            onChange={(e) => this.setState({ url: e.target.value })}\n                        />\n                        <button onClick={this.btnSubmitRestCall}>Call</button>\n\n                        <br />\n\n                        <NameValueFields headingText='HTTP Header' buttonText='Add Headers' fieldsStateUpdatedCallback={this.headersStateUpdated} />\n\n                    </div>\n                    <div className=\"col-lg-5\">\n                        {/*\n                        Check for errors and render the ResultsSection component with either error message\n                        or the actual response depending on whether there are errors or not.\n                        */}\n\n                        {(this.state.errors.length > 0) ?\n                            <ResultsSection\n                                heading={`Error`}\n                                message={this.state.errors}\n                            />\n                            :\n                            <ResultsSection\n                                heading={`${this.state.method} ${this.state.url}`}\n                                message={this.state.response}\n                            />\n                        }\n\n                    </div>\n                    <div className=\"col-lg-1\"></div>\n                </div>\n            </div>\n        );\n    }\n};\n\nclass ResultsSection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <>\n                <h5> {`Result: ${this.props.heading}`}  </h5>\n                <pre>{this.props.message}</pre>\n            </>\n        );\n    }\n}\nReactDOM.render(<Main />, document.getElementById('root'));"],"sourceRoot":""}