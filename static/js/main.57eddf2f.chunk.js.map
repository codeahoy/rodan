{"version":3,"sources":["components/NameValueFields.js","components/AuthorizationFields.js","utils.js","components/RequestBody.js","index.js"],"names":["NameValueFields","props","addfields","event","fields","push","name","value","fieldsStateUpdatedCallback","btnRemoveFields","indexToRemove","target","id","newArray","i","length","inputNameChange","arr","slice","inputValueChange","initialValues","nextProps","nextState","this","className","key","headingText","map","val","type","onChange","onClick","buttonText","React","Component","AuthorizationFields","handleAuthTypeChange","preventDefault","authType","auth","username","password","updateParentByCallback","authStateUpdatedCallback","Object","assign","handleBasicAuthInputChange","console","log","placeholder","defaultBodyObject","contentType","content","defaultRawBodyObject","RequestBody","handleBodyTypeChange","bodyType","body","rawBodyContentsTextArea","updateParentOnChange","handleRawBodyTypeChange","JSON","stringify","handleRawBodyContentChange","onComponentParamsUpdate","checked","htmlFor","rows","Main","checkErrors","errors","state","headers","forEach","item","btnSubmitRestCall","setState","showResult","errorsArray","response","queryParams","url","encode","fetchOptions","method","fetch","then","res","undefined","json","data","reason","headersStateUpdated","headersCopy","queryParamsStateUpdated","paramsCopy","addDemoGetWithQueryParams","authStateUpdated","authCopy","bodyComponentUpdated","bodyCopy","e","href","heading","message","ResultsSection","class","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57eddf2f.chunk.js","sourcesContent":["import React from 'react';\n\nclass NameValueFields extends React.Component {\n    constructor(props) {\n        super(props);\n        this.fields = this.props.initialValues;\n    }\n\n  \n    addfields = event => {\n        this.fields.push({ name: '', value: '' });\n\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        this.fields = nextProps.initialValues;\n        //console.log('call ' + JSON.stringify(nextProps.initialValues));\n        return true;\n    }\n\n\n    btnRemoveFields = event => {\n        let indexToRemove = event.target.id;\n\n        if (indexToRemove >= 0) {\n            let newArray = [];\n\n            for (let i = 0; i <  this.fields.length; i++) {\n                if (i != indexToRemove) {\n                    newArray.push( this.fields[i]);\n                }\n            }\n\n            this.fields = newArray;\n        }\n\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n   \n\n    inputNameChange = event => {\n        let arr =  this.fields.slice();\n        let index = event.target.id;\n\n        arr[index].name = event.target.value;\n\n        this.fields = arr;\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n    inputValueChange = event => {\n        let arr = this.fields.slice();\n        let index = event.target.id;\n\n        arr[index].value = event.target.value;\n\n        this.fields = arr;\n        this.props.fieldsStateUpdatedCallback(this.fields);\n    }\n\n    render() {\n\n        return (\n            <div className=\"mt-3\" key={this.props.initialValues}>\n                <h5>{this.props.headingText}</h5>\n                {\n                    this.fields.map((val, key) => {\n                        return (\n                            <div className=\"mt-1\" key={key}>\n                                <input\n                                    className=\"mx-1\"\n                                    type=\"text\"\n                                    id={key}\n                                    onChange={this.inputNameChange}\n                                    value={this.fields[key].name}\n\n                                />\n\n                                <input\n                                    type=\"text\"\n                                    id={key}\n                                    onChange={this.inputValueChange}\n                                    value={this.fields[key].value}\n                                />\n                                <button id={key} onClick={this.btnRemoveFields}>x</button>\n                            </div>\n                        );\n                    })\n                }\n                <button className=\"mt-1\" onClick={this.addfields}>{this.props.buttonText}</button>\n            </div>\n        )\n    }\n}\n\nexport default NameValueFields;","import React from 'react';\n\nclass AuthorizationFields extends React.Component {\n    constructor(props) {\n        super(props);\n        this.auth = this.props.auth;\n\n    }\n\n    handleAuthTypeChange = event => {\n\n        event.preventDefault();\n\n        let authType = event.target.value\n        let auth = {};\n\n        if (authType === 'basic') {\n            auth = {\n                type: 'basic',\n                username: '',\n                password: ''\n            }\n\n        } else if (authType === 'bearer') {\n            auth = {\n                type: 'bearer',\n            }\n\n        } else {\n            auth = {\n                type: 'no',\n            }\n        }\n\n        this.auth = auth;\n        this.updateParentByCallback();\n    }\n\n    updateParentByCallback = () => {\n        this.props.authStateUpdatedCallback(Object.assign({}, this.auth));\n    }\n\n    handleBasicAuthInputChange = (event) => {\n\n        console.log(event.target.name);\n\n        if (event.target.name === 'username') {\n            this.auth.username = event.target.value;\n            console.log(this.auth)\n        } else if (event.target.name === 'password') {\n\n            this.auth.password = event.target.value;\n\n        }\n        this.updateParentByCallback();\n        //this.auth[event.name] = event.value;\n\n    }\n\n    // Overriding this method to receive adhoc updates from parent component. \n    // Usually, this happens when a user clicks on an Example call (or History) \n    // which might update the state in parent. In that case, we want to assign\n    // local variable to the new value passed in props to this method.\n    shouldComponentUpdate(nextProps, nextState) {\n        this.auth = nextProps.auth;\n        //console.log(`shouldComponentUpdate : ${JSON.stringify(this.auth)} next: ${JSON.stringify(nextProps.auth)}`);\n        return true;\n    }\n\n\n    render() {\n        return (\n            <>\n            <h5>Authorization</h5>\n                <select\n                    value={this.auth.type}\n                    onChange={this.handleAuthTypeChange}>\n\n                    <option value=\"no\">No Authentication</option>\n                    <option value=\"basic\">Basic</option>\n                </select>\n                <br/>\n\n                {\n                    this.auth.type === 'basic' ?\n                    <div className=\"mt-1\">\n                        <input\n                            type=\"text\"\n                            className=\"mx-1\"\n                            name=\"username\"\n                            value={this.auth.username}\n                            placeholder=\"Username\"\n                            onChange={this.handleBasicAuthInputChange}\n\n                        /> \n                        <input\n                            type=\"text\"\n                            className=\"mt-1\"\n                            name=\"password\"\n                            value={this.auth.password}\n                            placeholder=\"Password\"\n                            onChange={this.handleBasicAuthInputChange}\n\n                        /> \n\n                    </div>\n                        \n                        :\n                        <div></div>}\n\n\n\n            </>\n        )\n\n\n    }\n}\n\n\nexport default AuthorizationFields;","export const logObject = (o) => {\n    console.log(JSON.stringify(o));\n}\n\nexport const defaultBodyObject = {\n    type: 'no',\n    contentType: '',\n    content: ''\n}\n\nexport const defaultRawBodyObject = {\n    type: 'raw',\n    contentType: 'raw-text',\n    content: ''\n}","import React from 'react';\nimport { logObject, defaultRawBodyObject } from '../utils';\n\nclass RequestBody extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.body = this.props.body;\n        this.updateParentOnChange = this.props.onComponentParamsUpdate;\n        // Store the contents of the text area so it is not lost when users \n        // are switching between body types\n        this.rawBodyContentsTextArea = '';\n    }\n\n    handleBodyTypeChange = (event) => {\n\n        let bodyType = event.target.value;\n\n        if (bodyType === 'no') {\n            this.body = {\n                type: 'no'\n            };\n        } else if (bodyType === 'raw') {\n            this.body = defaultRawBodyObject;\n        }\n\n        // Restore the contents area of the text box\n        this.body.content = this.rawBodyContentsTextArea;\n        console.log('rawBodyContentsTextArea ' + this.rawBodyContentsTextArea);\n\n        this.updateParentOnChange(this.body);\n\n    }\n\n    handleRawBodyTypeChange = (event) => {\n        this.body.contentType = event.target.id;   \n        this.updateParentOnChange(this.body);\n        console.log('f ' + JSON.stringify(this.body));\n    }\n\n    handleRawBodyContentChange = (event) => {\n        this.rawBodyContentsTextArea = event.target.value;\n        this.body.content = this.rawBodyContentsTextArea;\n        this.updateParentOnChange(this.body);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        this.body = nextProps.body;\n        return true;\n    }\n\n\n\n    render() {\n        return (<>\n         <h5>Request Body</h5>\n         <select\n            value={this.body.type}\n            onChange={this.handleBodyTypeChange}>\n\n            <option value=\"no\">None</option>\n            <option value=\"raw\">Raw</option>\n            <option value=\"file\">File</option>\n        </select>\n\n        {\n            this.body.type === 'raw' ? \n            <div>\n                <div className=\"custom-control custom-radio custom-control-inline\">\n                <input type=\"radio\" checked={this.body.contentType === 'raw-text'} className=\"custom-control-input\" id=\"raw-text\" name=\"raw-type\" onChange={this.handleRawBodyTypeChange}/>\n                <label className=\"custom-control-label\" htmlFor=\"raw-text\">Text</label>\n                </div>\n\n                <div className=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" checked={this.body.contentType  === 'raw-json'} className=\"custom-control-input\" id=\"raw-json\" name=\"raw-type\" onChange={this.handleRawBodyTypeChange}/>\n                    <label className=\"custom-control-label\" htmlFor=\"raw-json\">JSON</label>\n                </div>\n\n                <div className=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" checked={this.body.contentType  === 'raw-xml'} className=\"custom-control-input\" id=\"raw-xml\" name=\"raw-type\" onChange={this.handleRawBodyTypeChange}/>\n                    <label className=\"custom-control-label\" htmlFor=\"raw-xml\">XML</label>\n                </div>\n            \n        \n                <div className=\"custom-control custom-radio custom-control-inline\">\n                    <input type=\"radio\" checked={this.body.contentType  === 'raw-javascript'} className=\"custom-control-input\" id=\"raw-javascript\" name=\"raw-type\" onChange={this.handleRawBodyTypeChange}/>\n                    <label className=\"custom-control-label\" htmlFor=\"raw-javascript\">JavaScript</label>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"rawBodyContent\">Large textarea</label>\n                    <textarea className=\"form-control rounded-0\" id=\"rawBodyContent\" value={this.body.content}rows=\"8\" onChange={this.handleRawBodyContentChange}></textarea>\n                </div>\n\n            </div>\n            :\n\n            <div></div>\n        } \n\n        </>);\n    }\n\n   \n}\n\n\nexport default RequestBody;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NameValueFields from './components/NameValueFields';\nimport AuthorizationFields from './components/AuthorizationFields';\nimport { encode } from \"base-64\";\nimport RequestBody from './components/RequestBody';\nimport { defaultBodyObject } from './utils';\n\nclass Main extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            url: 'https://jsonplaceholder.typicode.com/users',\n            method: 'GET',\n            headers: [],\n            errors: [],\n            queryParams: [],\n            showResult: false,\n            auth: {},\n            body: defaultBodyObject\n        };\n    }\n\n    checkErrors = () => {\n\n        let errors = [];\n\n        this.state.headers.forEach((item) => {\n            if (item.name.length === 0) {\n                errors.push('Headers cannot be empty');\n            }\n        });\n\n        return errors;\n    }\n\n    btnSubmitRestCall = event => {\n\n        event.preventDefault();\n\n        // This will show the results section\n        this.setState({ showResult: true });\n\n        // Clear previous errors and check for new ones\n        this.setState({ errors: [] });\n\n        let errorsArray = this.checkErrors();\n        if (errorsArray.length > 0) {\n            this.setState({ errors: errorsArray.slice() });\n            return;\n        }\n\n        this.setState({ response: 'fetching...' });\n\n        let queryParams = '';\n        if (this.state.queryParams.length > 0) {\n            queryParams = '?';\n            this.state.queryParams.map((item) => {\n                if (item.name.length > 0) {\n                    queryParams = queryParams + item.name + '=' + item.value + '&';\n                }\n\n                return item; // To get rid of warning\n            });\n            queryParams = queryParams.slice(0, -1); // Delete last ampersand (&)\n        }\n\n        let url = this.state.url + queryParams;\n        console.log(url);\n\n        // Assign headers array from the state\n        let headers = Object.assign({}, ...this.state.headers.map(item => ({ [item.name]: item.value })));\n\n        // Assign authorization array from the state\n        if (this.state.auth.type != null && this.state.auth.type === 'basic') {\n            console.log('adding auth')\n            headers = Object.assign(headers, {\n                'Authorization': 'Basic ' + encode(this.state.auth.username + \":\" + this.state.auth.password)\n            });\n        }\n\n        // Add request body if it's selected\n        let body = Object.assign({}, JSON.stringify(this.state.body.content));\n        if (this.state.body.type !== 'no') {\n            if (this.state.body.type === 'raw') {\n                let contentType = {};\n                switch (this.state.body.contentType) {\n                    case 'raw-json':\n                        contentType = { 'Content-Type': 'application/json' };\n                        break;\n                    case 'raw-xml':\n                        contentType = { 'Content-Type': 'application/xml' };\n                        break;\n                    case 'raw-javacript':\n                        contentType = { 'Content-Type': 'application/javascript' };\n                        break;\n\n                    default:\n                        contentType = { 'Content-Type': 'application/text' };\n                }\n\n                headers = Object.assign(headers, contentType);\n\n            }\n        }\n\n        let fetchOptions = {\n            method: this.state.method,\n            headers: headers\n        }\n\n        if (this.state.method !== 'GET' && body.type !== 'no') {\n            fetchOptions = Object.assign(fetchOptions, { body: body })\n        }\n\n\n\n\n        fetch(url, fetchOptions)\n            .then(res => {\n                if (res === undefined) {\n                    this.setState({ response: '' })\n                } else {\n                    return res.json()\n                }\n            })\n            .then((data) => {\n                console.log(data);\n                this.setState({ response: JSON.stringify(data, undefined, 2) });\n            }, reason => {\n                this.setState({ response: 'error ' + reason });\n\n            })\n    }\n\n    headersStateUpdated = (headersCopy) => {\n        this.setState({ headers: headersCopy })\n    }\n\n    queryParamsStateUpdated = (paramsCopy) => {\n        this.setState({ queryParams: paramsCopy })\n    }\n\n    addDemoGetWithQueryParams = () => {\n\n        this.setState({\n            headers: [],\n            queryParams: [{ name: 'symbols', value: 'USD,GBP' }],\n            url: 'https://api.exchangeratesapi.io/latest',\n        });\n    }\n\n    authStateUpdated = (authCopy) => {\n        console.log('authStateUpdated');\n        this.setState({\n            auth: authCopy\n        });\n\n    }\n\n    bodyComponentUpdated = (bodyCopy) => {\n        console.log('body updated');\n        this.setState({\n            body: bodyCopy\n        })\n    }\n\n    render() {\n        return (\n\n            <div className=\"container-fluid mt-3\">\n                <div className=\"row content\">\n                    <div className=\"col-lg-1\"></div>\n                    <div className=\"col-lg-5\">\n\n                        <div className=\"input-group\">\n                            <select\n                                className=\"custom-select flex-shrink w-auto\"\n                                value={this.state.method}\n                                onChange={(e) => this.setState({ method: e.target.value })}>\n\n                                <option value=\"POST\">POST</option>\n                                <option value=\"GET\">GET</option>\n                                <option value=\"PUT\">PUT</option>\n                            </select>\n\n                            <input type=\"text\" value={this.state.url} placeholder=\"HTTP URL\" className=\"form-control\" onChange={(e) => this.setState({ url: e.target.value })} />\n                            <span className=\"input-group-btn ml-1\"><input type=\"button\" value=\"Call\" className=\"btn btn-primary\" onClick={this.btnSubmitRestCall} /></span>\n                        </div>\n\n\n\n                        <hr />\n\n                        <AuthorizationFields\n                            auth={this.state.auth}\n                            authStateUpdatedCallback={this.authStateUpdated} />\n\n                        <hr />\n\n                        <NameValueFields\n                            headingText='HTTP Header'\n                            buttonText='Add Headers'\n                            fieldsStateUpdatedCallback={this.headersStateUpdated}\n                            initialValues={this.state.headers.slice()} />\n\n                        <hr />\n\n                        <NameValueFields\n                            headingText='Query Parameters'\n                            buttonText='Add Parameters'\n                            fieldsStateUpdatedCallback={this.queryParamsStateUpdated}\n                            initialValues={this.state.queryParams.slice()} />\n\n                        <hr />\n\n                        <RequestBody\n                            body={this.state.body}\n                            onComponentParamsUpdate={this.bodyComponentUpdated} />\n\n\n                        <h4 className=\"mt-4\"> Examples </h4>\n\n                        <a href=\"#\" onClick={this.addDemoGetWithQueryParams}>Exchange Rate (Query Parameter)</a>\n\n\n                    </div>\n                    <div className=\"col-lg-5\">\n                        {/*\n                        Check for errors and render the ResultsSection component with either error message\n                        or the actual response depending on whether there are errors or not.\n                        */}\n\n                        {(this.state.errors.length > 0) ?\n                            <ResultsSection\n                                heading={`Error`}\n                                message={this.state.errors}\n                            />\n                            :\n                            <ResultsSection\n                                heading={`${this.state.method} ${this.state.url}`}\n                                message={this.state.response}\n                            />\n                        }\n\n\n\n                    </div>\n                    <div className=\"col-lg-1\"></div>\n                </div>\n            </div>\n        );\n    }\n};\n\nclass ResultsSection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <>\n                <h5> {`Result: ${this.props.heading}`}  </h5>\n                <pre class=\"prettyprint\">{this.props.message}</pre>\n            </>\n        );\n    }\n}\nReactDOM.render(<Main />, document.getElementById('root'));"],"sourceRoot":""}